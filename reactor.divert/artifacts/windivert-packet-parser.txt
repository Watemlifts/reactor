	//--------------------------------------------------
    // packet headers
    //--------------------------------------------------

    IntPtr ppIpHdr;

    IntPtr ppIpv6Hdr;

    IntPtr ppIcmpHdr;

    IntPtr ppIcmpv6Hdr;

    IntPtr ppTcpHdr;

    IntPtr ppUdpHdr;

    IntPtr ppData;

    uint   pDataLen;

    WinDivert.WinDivertHelperParsePacket(this.readbuffer, read, out ppIpHdr,
                
                                                                out ppIpv6Hdr,

                                                                out ppIcmpHdr,

                                                                out ppIcmpv6Hdr,

                                                                out ppTcpHdr,

                                                                out ppUdpHdr,

                                                                out ppData,

                                                                out pDataLen);

    //----------------------------------------------------
    // parse packet source and destination (best attempt)
    //----------------------------------------------------

    PacketType type     = PacketType.Unknown;

    IPAddress  src_addr = IPAddress.None;
                
    IPAddress  dst_addr = IPAddress.None;

    int        src_port = 0;

    int        dst_port = 0;

    #region Parser

    if (ppIpHdr != IntPtr.Zero)
    {
        try
        {
            var iphdr = (WINDIVERT_IPHDR)Marshal.PtrToStructure(ppIpHdr, typeof(WINDIVERT_IPHDR));

            type      = PacketType.IP;

            src_addr  = new IPAddress(new byte[] { iphdr.SrcAddr0, iphdr.SrcAddr1, iphdr.SrcAddr2, iphdr.SrcAddr3 });

            dst_addr  = new IPAddress(new byte[] { iphdr.DstAddr0, iphdr.DstAddr1, iphdr.DstAddr2, iphdr.DstAddr3 });
        }
        catch
        {

        }
    }

    if (ppIpv6Hdr != IntPtr.Zero)
    {
        try
        {
            var ipv6hdr = (PWINDIVERT_IPV6HDR)Marshal.PtrToStructure(ppIpv6Hdr, typeof(PWINDIVERT_IPV6HDR));
        }
        catch
        {

        }
    }

    if (ppIcmpHdr != IntPtr.Zero)
    {
        try
        {
            var imcphdr = (PWINDIVERT_ICMPHDR)Marshal.PtrToStructure(ppIcmpHdr, typeof(PWINDIVERT_ICMPHDR));
        }
        catch
        {

        }
    }

    if (ppIcmpv6Hdr != IntPtr.Zero)
    {
        try
        {
            var icmpv6hdr = (PWINDIVERT_ICMPV6HDR)Marshal.PtrToStructure(ppIcmpv6Hdr, typeof(PWINDIVERT_ICMPV6HDR));
        }
        catch
        {

        }
    }

    if (ppTcpHdr != IntPtr.Zero)
    {
        try
        {
            var tcphdr = (PWINDIVERT_TCPHDR)Marshal.PtrToStructure(ppTcpHdr, typeof(PWINDIVERT_TCPHDR));

            type       = PacketType.TCP;

            src_port   = Capture.LittleEndian(tcphdr.SrcPort);

            dst_port   = Capture.LittleEndian(tcphdr.DstPort);
        }
        catch
        {

        }
    }

    if (ppUdpHdr != IntPtr.Zero)
    {
        try
        {
            var udphdr = (WINDIVERT_UDPHDR)Marshal.PtrToStructure(ppUdpHdr, typeof(WINDIVERT_UDPHDR));

            type       = PacketType.UDP;

            src_port   = Capture.LittleEndian(udphdr.SrcPort);

            dst_port   = Capture.LittleEndian(udphdr.DstPort);                       
        }
        catch
        {

        }
    }

    #endregion